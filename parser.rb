#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 167)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.run(code)
    p @tokens if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    24,    28,    23,    26,    20,    21,    26,    13,    14,    15,
    16,    17,    18,    22,    45,    23,    19,    20,    21,    46,
    13,    14,    15,    16,    17,    18,    22,    73,    27,    19,
    72,    27,    12,    23,    73,    20,    21,    87,    13,    14,
    15,    16,    17,    18,    22,    12,    23,    19,    20,    21,
    48,    13,    14,    15,    16,    17,    18,    22,    89,    23,
    19,    20,    21,    12,    13,    14,    15,    16,    17,    18,
    22,    50,    23,    19,    20,    21,    12,    13,    14,    15,
    16,    17,    18,    22,    75,    23,    19,    20,    21,    12,
    13,    14,    15,    16,    17,    18,    22,    28,    23,    19,
    20,    21,    12,    13,    14,    15,    16,    17,    18,    22,
    71,    23,    19,    20,    21,    12,    13,    14,    15,    16,
    17,    18,    22,    28,    23,    19,    20,    21,    12,    13,
    14,    15,    16,    17,    18,    22,   nil,    23,    19,    20,
    21,    12,    13,    14,    15,    16,    17,    18,    22,   nil,
    23,    19,    20,    21,    12,    13,    14,    15,    16,    17,
    18,    22,   nil,    23,    19,    20,    21,    12,    13,    14,
    15,    16,    17,    18,    22,   nil,    23,    19,    20,    21,
    12,    13,    14,    15,    16,    17,    18,    22,   nil,    23,
    19,    20,    21,    12,    13,    14,    15,    16,    17,    18,
    22,   nil,    23,    19,    20,    21,    12,    13,    14,    15,
    16,    17,    18,    22,   nil,    23,    19,    20,    21,    12,
    13,    14,    15,    16,    17,    18,    22,   nil,    23,    19,
    20,    21,    12,    13,    14,    15,    16,    17,    18,    22,
   nil,    23,    19,    20,    21,    12,    13,    14,    15,    16,
    17,    18,    22,   nil,    23,    19,    20,    21,    12,    13,
    14,    15,    16,    17,    18,    22,   nil,    23,    19,    20,
    21,    12,    13,    14,    15,    16,    17,    18,    22,   nil,
    23,    19,    20,    21,    12,    13,    14,    15,    16,    17,
    18,    22,   nil,    23,    19,    20,    21,    12,    13,    14,
    15,    16,    17,    18,    22,   nil,    23,    19,    20,    21,
    12,    13,    14,    15,    16,    17,    18,    22,   nil,    23,
    19,    20,    21,    12,    13,    14,    15,    16,    17,    18,
    22,    26,    23,    19,    20,    21,    12,    13,    14,    15,
    16,    17,    18,    22,    86,    26,    19,    26,    28,    12,
    39,    40,   nil,    83,   nil,    85,    27,    67,    82,   nil,
   nil,    81,    12,    26,    26,    26,    26,    26,   nil,   nil,
    27,    93,    27,    28,    84,    39,    40,    37,    38,    33,
    34,    35,    36,    31,    32,    30,    29,    26,    27,    27,
    27,    27,    27,   nil,    43,    94,    28,    42,    39,    40,
    37,    38,    33,    34,    35,    36,    31,    32,    30,    29,
   nil,   nil,    27,    28,    63,    39,    40,    37,    38,    33,
    34,    35,    36,    31,    32,    30,    29,    28,   nil,    39,
    40,    37,    38,    33,    34,    35,    36,    31,    32,    30,
    29,    28,   nil,    39,    40,    37,    38,    33,    34,    35,
    36,    31,    32,    30,    29,    28,   nil,    39,    40,    37,
    38,    33,    34,    35,    36,    31,    32,    30,    29,    28,
   nil,    39,    40,    37,    38,    33,    34,    35,    36,    31,
    32,    30,    29,    28,   nil,    39,    40,    37,    38,    33,
    34,    35,    36,    31,    32,    30,    28,   nil,    39,    40,
    37,    38,    33,    34,    35,    36,    31,    32,    28,   nil,
    39,    40,    37,    38,    33,    34,    35,    36,    28,   nil,
    39,    40,    37,    38,    33,    34,    35,    36,    28,   nil,
    39,    40,    37,    38,    28,   nil,    39,    40,    37,    38,
    28,   nil,    39,    40,    37,    38,    28,   nil,    39,    40,
    37,    38,    28,   nil,    39,    40 ]

racc_action_check = [
     1,    61,    30,    46,    30,    30,     1,    30,    30,    30,
    30,    30,    30,    30,    20,    90,    30,    90,    90,    21,
    90,    90,    90,    90,    90,    90,    90,    64,    46,    90,
    64,     1,    30,    12,    79,    12,    12,    79,    12,    12,
    12,    12,    12,    12,    12,    90,    88,    12,    88,    88,
    24,    88,    88,    88,    88,    88,    88,    88,    82,    19,
    88,    19,    19,    12,    19,    19,    19,    19,    19,    19,
    19,    28,    73,    19,    73,    73,    88,    73,    73,    73,
    73,    73,    73,    73,    67,    71,    73,    71,    71,    19,
    71,    71,    71,    71,    71,    71,    71,    62,    23,    71,
    23,    23,    73,    23,    23,    23,    23,    23,    23,    23,
    50,    70,    23,    70,    70,    71,    70,    70,    70,    70,
    70,    70,    70,    44,    25,    70,    25,    25,    23,    25,
    25,    25,    25,    25,    25,    25,   nil,    69,    25,    69,
    69,    70,    69,    69,    69,    69,    69,    69,    69,   nil,
    29,    69,    29,    29,    25,    29,    29,    29,    29,    29,
    29,    29,   nil,     0,    29,     0,     0,    69,     0,     0,
     0,     0,     0,     0,     0,   nil,    31,     0,    31,    31,
    29,    31,    31,    31,    31,    31,    31,    31,   nil,    32,
    31,    32,    32,     0,    32,    32,    32,    32,    32,    32,
    32,   nil,    43,    32,    43,    43,    31,    43,    43,    43,
    43,    43,    43,    43,   nil,    34,    43,    34,    34,    32,
    34,    34,    34,    34,    34,    34,    34,   nil,    35,    34,
    35,    35,    43,    35,    35,    35,    35,    35,    35,    35,
   nil,    36,    35,    36,    36,    34,    36,    36,    36,    36,
    36,    36,    36,   nil,    37,    36,    37,    37,    35,    37,
    37,    37,    37,    37,    37,    37,   nil,    38,    37,    38,
    38,    36,    38,    38,    38,    38,    38,    38,    38,   nil,
    39,    38,    39,    39,    37,    39,    39,    39,    39,    39,
    39,    39,   nil,    40,    39,    40,    40,    38,    40,    40,
    40,    40,    40,    40,    40,   nil,    68,    40,    68,    68,
    39,    68,    68,    68,    68,    68,    68,    68,   nil,    42,
    68,    42,    42,    40,    42,    42,    42,    42,    42,    42,
    42,    45,    33,    42,    33,    33,    68,    33,    33,    33,
    33,    33,    33,    33,    78,    76,    33,    78,    60,    42,
    60,    60,   nil,    76,   nil,    78,    45,    45,    74,   nil,
   nil,    74,    33,    91,    47,    81,    77,    86,   nil,   nil,
    76,    91,    78,    47,    77,    47,    47,    47,    47,    47,
    47,    47,    47,    47,    47,    47,    47,    92,    91,    47,
    81,    77,    86,   nil,    18,    92,    41,    18,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
   nil,   nil,    92,    49,    41,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,     2,   nil,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,    80,   nil,    80,    80,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    65,   nil,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    66,
   nil,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    51,   nil,    51,    51,    51,    51,    51,
    51,    51,    51,    51,    51,    51,    52,   nil,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    54,   nil,
    54,    54,    54,    54,    54,    54,    54,    54,    53,   nil,
    53,    53,    53,    53,    53,    53,    53,    53,    57,   nil,
    57,    57,    57,    57,    56,   nil,    56,    56,    56,    56,
    58,   nil,    58,    58,    58,    58,    55,   nil,    55,    55,
    55,    55,    59,   nil,    59,    59 ]

racc_action_pointer = [
   161,     0,   412,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   365,    57,
     2,     6,   nil,    96,    50,   122,   nil,   nil,    59,   148,
     0,   174,   187,   330,   213,   226,   239,   252,   265,   278,
   291,   381,   317,   200,   108,   325,    -3,   358,   nil,   398,
    78,   468,   481,   503,   493,   531,   519,   513,   525,   537,
   333,   -14,    82,   nil,    -3,   440,   454,    72,   304,   135,
   109,    83,   nil,    70,   328,   nil,   339,   360,   341,     4,
   426,   359,    46,   nil,   nil,   nil,   361,   nil,    44,   nil,
    13,   357,   381,   nil,   nil ]

racc_action_default = [
    -3,   -52,    -1,    -7,    -8,    -9,   -10,   -11,   -12,   -13,
   -14,   -15,   -52,   -17,   -18,   -19,   -20,   -21,   -41,   -52,
   -52,   -52,   -49,   -52,   -52,    -4,    -5,    -6,   -52,   -52,
   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,
   -52,   -52,   -27,   -52,   -40,   -52,   -52,   -52,    95,    -2,
   -24,   -28,   -29,   -30,   -31,   -32,   -33,   -34,   -35,   -36,
   -37,   -38,   -39,   -16,   -52,   -25,   -42,   -47,    -3,    -3,
    -3,   -27,   -22,   -52,   -52,   -45,   -52,   -52,   -52,   -52,
   -26,   -52,   -52,   -44,   -48,   -50,   -52,   -23,    -3,   -46,
    -3,   -52,   -52,   -43,   -51 ]

racc_goto_table = [
     1,    41,    68,    69,    70,    64,    74,   nil,    44,   nil,
   nil,   nil,    47,   nil,    49,   nil,   nil,   nil,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
   nil,    65,    66,   nil,    79,   nil,   nil,   nil,    88,   nil,
   nil,   nil,   nil,    90,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    65,   nil,    80,   nil,   nil,   nil,   nil,   nil,    76,    77,
    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,   nil,
    92 ]

racc_goto_check = [
     1,     2,     3,     3,     3,    13,    14,   nil,     2,   nil,
   nil,   nil,     2,   nil,     2,   nil,   nil,   nil,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   nil,     2,     2,   nil,    13,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,     2,   nil,   nil,   nil,   nil,   nil,     1,     1,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,
     1 ]

racc_goto_pointer = [
   nil,     0,   -11,   -43,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -37,   -61 ]

racc_goto_default = [
   nil,   nil,     2,    25,     3,     4,     5,     6,     7,     8,
     9,    10,    11,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 35, :_reduce_1,
  3, 35, :_reduce_2,
  0, 35, :_reduce_3,
  2, 35, :_reduce_4,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  3, 36, :_reduce_16,
  1, 38, :_reduce_17,
  1, 38, :_reduce_18,
  1, 38, :_reduce_19,
  1, 38, :_reduce_20,
  1, 38, :_reduce_21,
  4, 39, :_reduce_22,
  6, 39, :_reduce_23,
  3, 39, :_reduce_24,
  1, 47, :_reduce_25,
  3, 47, :_reduce_26,
  0, 47, :_reduce_27,
  3, 40, :_reduce_28,
  3, 40, :_reduce_29,
  3, 40, :_reduce_30,
  3, 40, :_reduce_31,
  3, 40, :_reduce_32,
  3, 40, :_reduce_33,
  3, 40, :_reduce_34,
  3, 40, :_reduce_35,
  3, 40, :_reduce_36,
  3, 40, :_reduce_37,
  3, 40, :_reduce_38,
  3, 40, :_reduce_39,
  2, 40, :_reduce_40,
  1, 42, :_reduce_41,
  3, 43, :_reduce_42,
  8, 44, :_reduce_43,
  5, 44, :_reduce_44,
  1, 48, :_reduce_45,
  3, 48, :_reduce_46,
  0, 48, :_reduce_47,
  5, 45, :_reduce_48,
  1, 41, :_reduce_49,
  5, 46, :_reduce_50,
  8, 46, :_reduce_51 ]

racc_reduce_n = 52

racc_shift_n = 95

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :END => 14,
  "." => 15,
  "!" => 16,
  "*" => 17,
  "/" => 18,
  "+" => 19,
  "-" => 20,
  ">" => 21,
  ">=" => 22,
  "<" => 23,
  "<=" => 24,
  "==" => 25,
  "!=" => 26,
  "&&" => 27,
  "||" => 28,
  "=" => 29,
  "," => 30,
  ";" => 31,
  "(" => 32,
  ")" => 33 }

racc_nt_base = 34

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "END",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\";\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "GetConstant",
  "GetLocal",
  "SetLocal",
  "Def",
  "Class",
  "If",
  "Arguments",
  "Parameters" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Nodes.new([ val[0] ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_17(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_18(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_19(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_20(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_21(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_22(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_24(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_25(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_26(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_27(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_30(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_32(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[1], val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_41(val, _values, result)
     result = GetLocalNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_42(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_43(val, _values, result)
     result = DefNode.new(val[1], val[3], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_44(val, _values, result)
     result = DefNode.new(val[1], [], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_45(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_46(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_48(val, _values, result)
     result = ClassNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_49(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_50(val, _values, result)
     result = IfNode.new(val[1], val[3], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_51(val, _values, result)
     result = IfNode.new(val[1], val[3], val[6]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
